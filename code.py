# -*- coding: utf-8 -*-
"""Ahmed El3gabi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkLcwhQUzjlF8JnK88SvAPDWySeCPRyb
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('/content/car_data.csv', encoding= 'unicode_escape')

print(df)

df.columns = ['Buying Price','Maintenance','Number of Doors','Capacity','Size of Luggage Boot','Car Safety','Car Acceptability']

inputs = df.drop('Car Acceptability',axis=1)
target = df['Car Acceptability']

dum1 = pd.get_dummies(inputs['Buying Price'])
dum2 = pd.get_dummies(inputs['Maintenance'])
dum3 = pd.get_dummies(inputs['Number of Doors'])
dum4 = pd.get_dummies(inputs['Capacity'])
dum5 = pd.get_dummies(inputs['Size of Luggage Boot'])
dum6 = pd.get_dummies(inputs['Car Safety'])

inputs.drop('Buying Price',inplace=True,axis=1)
inputs.drop('Maintenance',inplace=True,axis=1)
inputs.drop('Number of Doors',inplace=True,axis=1)
inputs.drop('Capacity',inplace=True,axis=1)
inputs.drop('Size of Luggage Boot',inplace=True,axis=1)
inputs.drop('Car Safety',inplace=True,axis=1)

inputs = pd.concat([inputs,dum1],axis='columns')
inputs = pd.concat([inputs,dum2],axis='columns')
inputs = pd.concat([inputs,dum3],axis='columns')
inputs = pd.concat([inputs,dum4],axis='columns')
inputs = pd.concat([inputs,dum5],axis='columns')
inputs = pd.concat([inputs,dum6],axis='columns')

print(inputs)

print(set(target.values))

target = target.map({'good':0,'vgood':1,'acc':2,'unacc':3})

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.neighbors import KNeighborsClassifier

X_train,X_test,y_train,y_test = train_test_split(inputs,target,test_size=0.25)

gnb=GaussianNB()
gnb.fit(X_train,y_train)
y_pred = gnb.predict(X_test)
print(metrics.accuracy_score(y_test,y_pred))

knn = KNeighborsClassifier(n_neighbors=4)
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
print(metrics.accuracy_score(y_test,y_pred))